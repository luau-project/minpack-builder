name: Archive on Windows
run-name: minpack archive on Windows
on:
  push:
    paths-ignore:
      - "**.md"
      - doc/**
  pull_request:
    paths-ignore:
      - "**.md"
      - doc/**

jobs:
  source-archive:
    name: Source Archive
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        BUILD_SHARED_LIBS: ['ON', 'OFF']
        BUILD_STATIC_LIBS: ['ON', 'OFF']
        TOOLCHAIN:
          - { COMPILER: 'intel', VERSION: '2024.1', CMAKE_GENERATOR: 'NMake Makefiles' }
          - { COMPILER: 'flang-new', VERSION: '', CMAKE_GENERATOR: 'Ninja' }
        SOURCE_ARCHIVE:
          - { format: 'zip', ext: ".zip" }
          - { format: 'tar-gz', ext: ".tar.gz" }
          - { format: 'tar-bz2', ext: ".tar.bz2" }
          - { format: 'tar-xz', ext: ".tar.xz" }

        exclude:
          - BUILD_SHARED_LIBS: 'ON'
            BUILD_STATIC_LIBS: 'ON'
            
          - BUILD_SHARED_LIBS: 'OFF'
            BUILD_STATIC_LIBS: 'OFF'
    env:
      ARCHIVE: minpack-1.1.0-sources${{ matrix.SOURCE_ARCHIVE.ext }}
      ARCHIVE_DIR: minpack-1.1.0-sources
    
    steps:
      
      - name: Checkout assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          ref: assets-ci-v1
          path: assets
      
      - name: Checkout repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          path: minpack-builder
      
      - name: Set environment variables to build and install directories
        run: |
          Add-Content $env:GITHUB_ENV "BUILDDIR=$env:RUNNER_TEMP/build"
          Add-Content $env:GITHUB_ENV "INSTALLDIR=$env:RUNNER_TEMP/install-${{ matrix.TOOLCHAIN.COMPILER }}"
      
      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
      
      - name: Setup Ninja build tool
        if: ${{ matrix.TOOLCHAIN.CMAKE_GENERATOR=='Ninja' }}
        run: |
          choco install ninja;
          ninja --version;
      
      - name: Setup MSVC
        if: ${{ matrix.TOOLCHAIN.COMPILER=='flang-new' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup miniconda, install LLVM flang-new (MSVC-like) from conda-forge, and set FC, CC and CXX environment variables.
        if: ${{ matrix.TOOLCHAIN.COMPILER=='flang-new' }}
        run: |
          & "$env:CONDA\shell\condabin\conda-hook.ps1";
          conda activate "$env:CONDA";
          conda install --yes -c conda-forge -n base flang libflang libfortran-main;
          Get-ChildItem env: | Where-Object { $_.Name.ToLower().Contains("conda") -or $_.Value.ToLower().Contains("conda") } | ForEach-Object { Add-Content $env:GITHUB_ENV ($_.Name + "=" + $_.Value); }
          Add-Content $env:GITHUB_ENV "FC=flang-new";
          Add-Content $env:GITHUB_ENV "CC=cl";
          Add-Content $env:GITHUB_ENV "CXX=cl";
      
      - uses: fortran-lang/setup-fortran@v1
        name: Setup Fortran and C compilers
        if: ${{ matrix.TOOLCHAIN.COMPILER=='intel' }}
        id: setup-fortran
        with:
          compiler: ${{ matrix.TOOLCHAIN.COMPILER }}
          version: ${{ matrix.TOOLCHAIN.VERSION }}
      
      - name: Set MSVC cl as C, C++ compiler
        if: ${{ matrix.TOOLCHAIN.COMPILER=='intel' }}
        run: |
          Add-Content $env:GITHUB_ENV "CC=cl"
          Add-Content $env:GITHUB_ENV "CXX=cl"
      
      - name: Configure the build of minpack 
        run: cmake -G "${{ matrix.TOOLCHAIN.CMAKE_GENERATOR }}" -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=Release -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix $env:INSTALLDIR -S minpack-builder -B $env:BUILDDIR
      
      - name: Create a Source Arhive
        run: |
          cmake --build $env:BUILDDIR --config Release --target source-${{ matrix.SOURCE_ARCHIVE.format }};
          dir $env:BUILDDIR;

      - name: Extract the Source Zip Archive
        if: ${{ matrix.SOURCE_ARCHIVE.format=='zip' }}
        run: |
          Expand-Archive $env:BUILDDIR\${{ env.ARCHIVE }} -DestinationPath (Get-Location);

      - name: Extract the Source Archive
        if: ${{ matrix.SOURCE_ARCHIVE.format!='zip' }}
        run: |
          & "C:\Program Files\7-Zip\7z.exe" x $env:BUILDDIR\${{ env.ARCHIVE }};
          & "C:\Program Files\7-Zip\7z.exe" x ((Get-Item $env:BUILDDIR\${{ env.ARCHIVE }}).BaseName);
      
      - name: Download minpack sources to extracted source archive
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" ${{ env.ARCHIVE_DIR }}; }
              
      - name: Set environment variables to build and install directories
        run: |
          Add-Content $env:GITHUB_ENV "BUILDDIR_SOURCE_ARCHIVE=$env:RUNNER_TEMP\source-archive-build"
          Add-Content $env:GITHUB_ENV "INSTALLDIR_SOURCE_ARCHIVE=$env:RUNNER_TEMP\source-archive-install-${{ matrix.TOOLCHAIN.COMPILER }}"
        
      - name: Configure the build of minpack 
        run: cmake -G "${{ matrix.TOOLCHAIN.CMAKE_GENERATOR }}" -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=Release -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix $env:INSTALLDIR_SOURCE_ARCHIVE -S ${{ env.ARCHIVE_DIR }} -B $env:BUILDDIR_SOURCE_ARCHIVE
      
      - name: Build from extracted source archive
        run: cmake --build $env:BUILDDIR_SOURCE_ARCHIVE --config Release
      
      - name: Install from extracted source archive
        run: cmake --install $env:BUILDDIR_SOURCE_ARCHIVE --config Release

      - name: Create Source Archive again
        run: |
          cmake --build $env:BUILDDIR_SOURCE_ARCHIVE --config Release --target source-${{ matrix.SOURCE_ARCHIVE.format }};
          dir $env:BUILDDIR_SOURCE_ARCHIVE;
      
      - name: Extract the Source Zip Archives again
        if: ${{ matrix.SOURCE_ARCHIVE.format=='zip' }}
        run: |
          mkdir comparison-dir;
          Expand-Archive $env:BUILDDIR\${{ env.ARCHIVE }} -DestinationPath comparison-dir;

          mkdir comparison-dir-source-archive;
          Expand-Archive $env:BUILDDIR_SOURCE_ARCHIVE\${{ env.ARCHIVE }} -DestinationPath comparison-dir-source-archive;

      - name: Extract the Source Archives again
        if: ${{ matrix.SOURCE_ARCHIVE.format!='zip' }}
        run: |
          mkdir comparison-dir;
          & "C:\Program Files\7-Zip\7z.exe" x $env:BUILDDIR\${{ env.ARCHIVE }} -ocomparison-dir;
          $basename_first = (Get-Item $env:BUILDDIR\${{ env.ARCHIVE }}).BaseName;
          & "C:\Program Files\7-Zip\7z.exe" x (Join-Path -Path comparison-dir -ChildPath $basename_first) -ocomparison-dir;

          mkdir comparison-dir-source-archive;
          & "C:\Program Files\7-Zip\7z.exe" x $env:BUILDDIR_SOURCE_ARCHIVE\${{ env.ARCHIVE }} -ocomparison-dir-source-archive;
          $basename_second = (Get-Item $env:BUILDDIR_SOURCE_ARCHIVE\${{ env.ARCHIVE }}).BaseName;
          & "C:\Program Files\7-Zip\7z.exe" x (Join-Path -Path comparison-dir-source-archive -ChildPath $basename_second) -ocomparison-dir-source-archive;

      # a reliable manner to compare
      # compressed files
      # is extracting them
      # and compare file-by-file
      - name: Compare the content of the compressed files for equality
        run: |
          $first_archive_fullname = (Get-Item (Join-Path -Path comparison-dir -ChildPath ${{ env.ARCHIVE_DIR }})).FullName;
          $first_archive_fullname_length = $first_archive_fullname.Length;
          $first_archive_file_suffixes = Get-ChildItem -File $first_archive_fullname -Recurse | Select-Object @{ Label = "Suffix"; Expression = { $_.FullName.Substring($first_archive_fullname_length) } };
          $first_archive_hashes = New-Object System.Collections.Generic.HashSet[string];
          
          foreach ($file in $first_archive_file_suffixes)
          {
            $file_suffix = $file.Suffix.ToString();
            $file_path = Join-Path -Path $first_archive_fullname -ChildPath $file_suffix;

            $file_hash_SHA256 = (Get-FileHash $file_path -Algorithm SHA256).Hash;
            $file_hash_MD5 = (Get-FileHash $file_path -Algorithm MD5).Hash;

            $added = $first_archive_hashes.Add("suffix: ${file_suffix}; SHA256: ${file_hash_SHA256}; MD5: ${file_hash_MD5}");
          }

          $second_archive_fullname = (Get-Item (Join-Path -Path comparison-dir-source-archive -ChildPath ${{ env.ARCHIVE_DIR }})).FullName;
          $second_archive_fullname_length = $second_archive_fullname.Length;
          $second_archive_file_suffixes = Get-ChildItem -File $second_archive_fullname -Recurse | Select-Object @{ Label = "Suffix"; Expression = { $_.FullName.Substring($second_archive_fullname_length) } };
          $second_archive_hashes = New-Object System.Collections.Generic.HashSet[string];
          
          foreach ($file in $second_archive_file_suffixes)
          {
            $file_suffix = $file.Suffix.ToString();
            $file_path = Join-Path -Path $second_archive_fullname -ChildPath $file_suffix;

            $file_hash_SHA256 = (Get-FileHash $file_path -Algorithm SHA256).Hash;
            $file_hash_MD5 = (Get-FileHash $file_path -Algorithm MD5).Hash;

            $added = $second_archive_hashes.Add("suffix: ${file_suffix}; SHA256: ${file_hash_SHA256}; MD5: ${file_hash_MD5}");
          }
          
          foreach ($hash in $first_archive_hashes)
          {
            if (-not $second_archive_hashes.Contains($hash))
            {
              Write-Host "Entry not found in the second archive: ${hash}";
              exit 1;
            }
          }

          foreach ($hash in $second_archive_hashes)
          {
            if (-not $first_archive_hashes.Contains($hash))
            {
              Write-Host "Entry not found in the first archive: ${hash}";
              exit 1;
            }
          }
  
  binary-archive:
    name: Binary Archive
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        BUILD_SHARED_LIBS: ['ON', 'OFF']
        BUILD_STATIC_LIBS: ['ON', 'OFF']
        TOOLCHAIN:
          - { COMPILER: 'intel', VERSION: '2024.1', CMAKE_GENERATOR: 'NMake Makefiles' }
          - { COMPILER: 'flang-new', VERSION: '', CMAKE_GENERATOR: 'Ninja' }
        BINARY_ARCHIVE:
          - { format: 'zip', ext: ".zip" }
          - { format: 'tar-gz', ext: ".tar.gz" }
          - { format: 'tar-bz2', ext: ".tar.bz2" }
          - { format: 'tar-xz', ext: ".tar.xz" }

        exclude:
          - BUILD_SHARED_LIBS: 'ON'
            BUILD_STATIC_LIBS: 'ON'
            
          - BUILD_SHARED_LIBS: 'OFF'
            BUILD_STATIC_LIBS: 'OFF'
    env:
      ARCHIVE: minpack-1.1.0-binaries${{ matrix.BINARY_ARCHIVE.ext }}
      ARCHIVE_DIR: minpack-1.1.0-binaries
    
    steps:
      
      - name: Checkout assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          ref: assets-ci-v1
          path: assets
      
      - name: Checkout repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          path: minpack-builder
      
      - name: Set environment variables to build and install directories
        run: |
          Add-Content $env:GITHUB_ENV "BUILDDIR=$env:RUNNER_TEMP/build"
          Add-Content $env:GITHUB_ENV "INSTALLDIR=$env:RUNNER_TEMP/install-${{ matrix.TOOLCHAIN.COMPILER }}"
      
      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
      
      - name: Setup Ninja build tool
        if: ${{ matrix.TOOLCHAIN.CMAKE_GENERATOR=='Ninja' }}
        run: |
          choco install ninja;
          ninja --version;
      
      - name: Setup MSVC
        if: ${{ matrix.TOOLCHAIN.COMPILER=='flang-new' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup miniconda, install LLVM flang-new (MSVC-like) from conda-forge, and set FC, CC and CXX environment variables.
        if: ${{ matrix.TOOLCHAIN.COMPILER=='flang-new' }}
        run: |
          & "$env:CONDA\shell\condabin\conda-hook.ps1";
          conda activate "$env:CONDA";
          conda install --yes -c conda-forge -n base flang libflang libfortran-main;
          Get-ChildItem env: | Where-Object { $_.Name.ToLower().Contains("conda") -or $_.Value.ToLower().Contains("conda") } | ForEach-Object { Add-Content $env:GITHUB_ENV ($_.Name + "=" + $_.Value); }
          Add-Content $env:GITHUB_ENV "FC=flang-new";
          Add-Content $env:GITHUB_ENV "CC=cl";
          Add-Content $env:GITHUB_ENV "CXX=cl";
      
      - uses: fortran-lang/setup-fortran@v1
        name: Setup Fortran and C compilers
        if: ${{ matrix.TOOLCHAIN.COMPILER=='intel' }}
        id: setup-fortran
        with:
          compiler: ${{ matrix.TOOLCHAIN.COMPILER }}
          version: ${{ matrix.TOOLCHAIN.VERSION }}
      
      - name: Set MSVC cl as C, C++ compiler
        if: ${{ matrix.TOOLCHAIN.COMPILER=='intel' }}
        run: |
          Add-Content $env:GITHUB_ENV "CC=cl"
          Add-Content $env:GITHUB_ENV "CXX=cl"
      
      - name: Configure the build of minpack 
        run: cmake -G "${{ matrix.TOOLCHAIN.CMAKE_GENERATOR }}" -DBUILD_SHARED_LIBS=${{ matrix.BUILD_SHARED_LIBS }} -DBUILD_STATIC_LIBS=${{ matrix.BUILD_STATIC_LIBS }} -DCMAKE_BUILD_TYPE=Release -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix $env:INSTALLDIR -S minpack-builder -B $env:BUILDDIR
      
      - name: Build from extracted source archive
        run: cmake --build $env:BUILDDIR --config Release
      
      - name: Install from extracted source archive
        run: cmake --install $env:BUILDDIR --config Release

      - name: Create a Binary Arhive
        run: |
          cmake --build $env:BUILDDIR --config Release --target binary-${{ matrix.BINARY_ARCHIVE.format }};
          dir $env:BUILDDIR;
