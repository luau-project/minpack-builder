name: LLVM Flang (GCC-like) on Windows
run-name: minpack compiled with latest LLVM Flang (GCC-like) from MSYS2 on Windows
on: [push]
jobs:
  shared-build:
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        CMAKE_BUILD_TYPE: ['Release', 'Debug']
        MSYS2_CONFIG: [{ sys: clang64, env: clang-x86_64, fc: flang.exe }]
    steps:
      - name: Checkout assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          ref: assets-ci-v1
          path: assets
      - name: Checkout repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          path: minpack-builder
      - name: Update MSYS2
        run: |
          C:\msys64\usr\bin\bash.exe -lc "pacman -Syuu --noconfirm --overwrite *"
          C:\msys64\usr\bin\bash.exe -lc "pacman -Syuu --noconfirm --overwrite *"
        shell: cmd
      - name: Install LLVM Flang (GCC-like) + GNU Make
        run: C:\msys64\usr\bin\bash.exe -lc "pacman -S mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-fc mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-make --noconfirm --overwrite *"
        shell: cmd
      - name: Add LLVM Flang (GCC-like) compiler to system environment PATH 
        run: Add-Content $env:GITHUB_PATH "C:\msys64\${{ matrix.MSYS2_CONFIG.sys }}\bin"
        shell: powershell
      - name: Set environment variables to build and install directories
        run: |
          Add-Content $env:GITHUB_ENV "BUILDDIR=$env:RUNNER_TEMP\build"
          Add-Content $env:GITHUB_ENV "INSTALLDIR=$env:RUNNER_TEMP\install-flang"
        shell: powershell
      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
        shell: powershell
      - name: Configure the build of minpack (USE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }})
        run: cmake -G "MinGW Makefiles" "-DCMAKE_Fortran_COMPILER=${{ matrix.MSYS2_CONFIG.fc }}" -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix %INSTALLDIR% -S minpack-builder -B %BUILDDIR%
        shell: cmd
      - name: Build minpack
        run: cmake --build %BUILDDIR% --config ${{ matrix.CMAKE_BUILD_TYPE }}
        shell: cmd
      - name: Install minpack
        run: cmake --install %BUILDDIR% --config ${{ matrix.CMAKE_BUILD_TYPE }}
        shell: cmd
  static-build:
    runs-on: windows-latest
    strategy:
      matrix:
        USE_DOWNLOAD: ['OFF']
        CMAKE_BUILD_TYPE: ['Release', 'Debug']
        MSYS2_CONFIG: [{ sys: clang64, env: clang-x86_64, fc: flang.exe }]
    steps:
      - name: Checkout assets
        uses: actions/checkout@v4
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        with:
          ref: assets-ci-v1
          path: assets
      - name: Checkout repository to minpack-builder directory
        uses: actions/checkout@v4
        with:
          path: minpack-builder
      - name: Update MSYS2
        run: |
          C:\msys64\usr\bin\bash.exe -lc "pacman -Syuu --noconfirm --overwrite *"
          C:\msys64\usr\bin\bash.exe -lc "pacman -Syuu --noconfirm --overwrite *"
        shell: cmd
      - name: Install LLVM Flang (GCC-like) + GNU Make
        run: C:\msys64\usr\bin\bash.exe -lc "pacman -S mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-fc mingw-w64-${{ matrix.MSYS2_CONFIG.env }}-make --noconfirm --overwrite *"
        shell: cmd
      - name: Add LLVM Flang (GCC-like) compiler to system environment PATH 
        run: Add-Content $env:GITHUB_PATH "C:\msys64\${{ matrix.MSYS2_CONFIG.sys }}\bin"
        shell: powershell
      - name: Set environment variables to build and install directories
        run: |
          Add-Content $env:GITHUB_ENV "BUILDDIR=$env:RUNNER_TEMP\build"
          Add-Content $env:GITHUB_ENV "INSTALLDIR=$env:RUNNER_TEMP\install-flang"
        shell: powershell
      - name: Download minpack sources
        if: ${{ matrix.USE_DOWNLOAD=='OFF' }}
        run: foreach ($current_file in "disclaimer",  "chkder.f",  "dogleg.f",  "dpmpar.f",  "enorm.f",  "fdjac1.f",  "fdjac2.f",  "hybrd1.f",  "hybrd.f",  "hybrj1.f",  "hybrj.f",  "lmder1.f",  "lmder.f",  "lmdif1.f",  "lmdif.f",  "lmpar.f",  "lmstr1.f",  "lmstr.f",  "qform.f",  "qrfac.f",  "qrsolv.f",  "r1mpyq.f",  "r1updt.f",  "rwupdt.f") { Copy-Item "assets\$current_file" "minpack-builder"; }
        shell: powershell
      - name: Configure the build of minpack (USE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }})
        run: cmake -G "MinGW Makefiles" "-DCMAKE_Fortran_COMPILER=${{ matrix.MSYS2_CONFIG.fc }}" -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} -DUSE_DOWNLOAD=${{ matrix.USE_DOWNLOAD }} --install-prefix %INSTALLDIR% -S minpack-builder -B %BUILDDIR%
        shell: cmd
      - name: Build minpack
        run: cmake --build %BUILDDIR% --config ${{ matrix.CMAKE_BUILD_TYPE }}
        shell: cmd
      - name: Install minpack
        run: cmake --install %BUILDDIR% --config ${{ matrix.CMAKE_BUILD_TYPE }}
        shell: cmd